/*!
 * engine-assemble <https://github.com/doowb/engine-assemble>
 *
 * Copyright (c) 2014-2015, Brian Woodward.
 * Licensed under the MIT License.
 */

'use strict';

/**
 * Module dependencies.
 */

var engine = require('engine-handlebars');
var helpers = require('handlebars-helpers');
var _ = require('lodash');

/**
 * Expose `engine`
 */

module.exports = engine;

/**
 * Store a reference to the original, un-modified
 * engine-handlebars methods
 */

var orig = {
  compile: engine.compile,
  render: engine.render,
  renderSync: engine.renderSync,
  renderFile: engine.renderFile
};

/**
 * Handlebars compile support. Compile the given `str`, register helpers
 * and partials from settings and return a function.
 *
 * ```js
 * var engine = require('engine-assemble');
 * var fn = engine.compile('{{name}}', {});
 * ```
 *
 * @param {String} `str`
 * @param {Object} `settings` object containing optional helpers and partials
 * @return {Function} Compiled template function
 * @api public
 */

engine.compile = function compile(str, options) {
  var opts = options || {};
  opts.helpers = _.extend({}, helpers(opts), opts.helpers);
  return orig.compile.call(engine, str, opts);
};

/**
 * Handlebars string support. Render the given `str` and invoke the
 * callback `cb(err, str)`.
 *
 * ```js
 * var engine = require('engine-assemble');
 * engine.render('{{name}}', {name: 'Jon'}, function (err, content) {
 *   console.log(content); //=> 'Jon'
 * });
 * ```
 *
 * @param {String} `str`
 * @param {Object|Function} `options` or callback.
 *     @property {Object} `cache` enable template caching
 *     @property {String} `filename` filename required for caching
 * @param {Function} `cb` callback function.
 * @api public
 */

engine.render = function render(str, options, cb) {
  var opts = options || {};
  if (typeof str === 'string') opts.helpers = _.extend({}, helpers(opts), opts.helpers);
  return orig.render.call(engine, str, opts, cb);
};

/**
 * Handlebars sync support. Synchronously render Handlebars templates.
 *
 * ```js
 * var engine = require('engine-assemble');
 * engine.renderSync('<%= name %>', {name: 'Jon'});
 * //=> 'Jon'
 * ```
 * @param  {Object} `str` The string to render.
 * @param  {Object} `options` Object of options.
 *   @option {Object} `settings` Settings to pass to Lo-Dash.
 *   @option {Object} `delims` Template delimiters, generated by [delims]
 *   @option {Object} `imports` Template helpers to pass to Lo-Dash.
 * @return {String} Rendered string.
 * @api public
 */

engine.renderSync = function renderSync(str, options) {
  var opts = options || {};
  if (typeof str === 'string') opts.helpers = _.extend({}, helpers(opts), opts.helpers);
  return orig.renderSync.call(engine, str, opts);
};

/**
 * Handlebars file support. Render a file at the given `filepath` and
 * callback `cb(err, str)`.
 *
 * ```js
 * var engine = require('engine-assemble');
 * engine.renderSync('foo/bar/baz.tmpl', {name: 'Jon'});
 * //=> 'Jon'
 * ```
 *
 * @param {String} `filepath`
 * @param {Object|Function} `options` or callback function.
 * @param {Function} `cb` callback function
 * @api public
 */

engine.renderFile = function renderFile(filepath, options, cb) {
  if (typeof options === 'function') {
    cb = options;
    options = {};
  }
  var opts = options || {};
  if (typeof str === 'string') opts.helpers = _.extend({}, helpers(opts), opts.helpers);
  return orig.renderFile.call(engine, filepath, opts, cb);
};

/**
 * Express support.
 */

engine.__express = engine.renderFile;
